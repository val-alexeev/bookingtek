{"version":3,"sources":["Store/Reducers/recipesSlice.js","Constants/constants.js","Store/index.js","Components/Forms/ingredientsForm/IngredientsFormStyles.js","Components/Forms/ingredientsForm/IngredientsForm.js","Components/SearchPage/SearchPage.js","Components/ResultsPage/ResultsPageStyles.js","Components/ResultsPage/ResultsPage.js","Layouts/Navigation/Navigation.js","App.js","serviceWorker.js","index.js"],"names":["getRecipes","createAsyncThunk","ingredients","a","recipesRequest","fetch","then","response","json","slice","createSlice","name","initialState","recentSearches","isLoading","isError","reducers","setRecipes","state","action","recipes","setRecentSearches","payload","extraReducers","pending","fulfilled","rejected","actions","selectRecipesSearchResults","selectRecipesRecentSearches","configureStore","reducer","FormInputWrapper","styled","div","FormLabel","label","FormInput","input","FormButton","button","FormError","FormValid","validationSchema","Yup","shape","min","required","Error","touched","message","IngredientsForm","children","dispatch","useDispatch","history","useHistory","initialValues","onSubmit","setSubmitting","resetForm","push","values","errors","handleChange","handleBlur","handleSubmit","isSubmitting","htmlFor","type","if","placeholder","onChange","onBlur","value","disabled","SearchPage","recipesRecentSearches","useSelector","length","map","ingredient","index","ResultsPageWrapper","ResultsTitle","h4","ResultsButton","ResultsPage","recipesSearchResults","onClick","goBack","result","title","Navigation","basename","component","exact","path","GlobalStyle","createGlobalStyle","App","Boolean","window","location","hostname","match","customHistory","createBrowserHistory","rootElement","document","getElementById","ReactDOM","render","store","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.f726cf7d.chunk.js","sourcesContent":["import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\nimport { API_KEY, NUMBER_OF_RECIPES } from \"Constants/constants\";\n\n// Thunk\nexport const getRecipes = createAsyncThunk(\n  \"recipes/getRecipes\",\n\n  async (ingredients) => {\n    const ingredientsList = ingredients;\n\n    const recipesRequest = `https://api.spoonacular.com/recipes/findByIngredients?ingredients=${ingredientsList}&number=${NUMBER_OF_RECIPES}&apiKey=${API_KEY}`;\n\n    return fetch(recipesRequest).then((response) => response.json());\n  }\n);\n\nconst initialState = {\n  recentSearches: [],\n  isLoading: false,\n  isError: false,\n};\n\nexport const slice = createSlice({\n  name: \"counter\",\n  initialState,\n  reducers: {\n    setRecipes: (state, action) => ({\n      ...state,\n      recipes: action.recipes,\n    }),\n    setRecentSearches: (state, { payload }) => {\n      state.recentSearches = [...state.recentSearches, payload];\n    },\n  },\n  extraReducers: {\n    [getRecipes.pending]: (state) => {\n      state.isLoading = true;\n    },\n    [getRecipes.fulfilled]: (state, { payload }) => {\n      state.recipes = payload;\n      state.isLoading = false;\n    },\n    [getRecipes.rejected]: (state) => {\n      state.isLoading = false;\n      state.isError = true;\n    },\n  },\n});\n\n// public exports\nexport const { setRecipes, setRecentSearches } = slice.actions;\n\n// selectors\nexport const selectRecipesSearchResults = (state) => state.slice.recipes || [];\nexport const selectRecipesRecentSearches = (state) =>\n  state.slice.recentSearches;\n\nexport default slice.reducer;\n","export const API_KEY = `e705354394e94b2dbdffe4e3ed5b7626`;\n\nexport const NUMBER_OF_RECIPES = 4;\n","import { configureStore } from \"@reduxjs/toolkit\";\nimport slice from \"./Reducers/recipesSlice\";\n\nexport default configureStore({\n  reducer: { slice },\n});\n","import styled from \"styled-components\";\n\nexport const FormInputWrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  margin: 20px;\n`;\n\nexport const FormLabel = styled.label`\n  font-weight: bold;\n  font-size: 16px;\n`;\n\nexport const FormInput = styled.input`\n  width: 100%;\n  padding: 12px 20px;\n  margin: 8px 0;\n  box-sizing: border-box;\n  border: 3px solid #ccc;\n  border-radius: 4px;\n\n  &::has-error {\n    border: 2px solid red;\n  }\n`;\n\nexport const FormButton = styled.button`\n  background-color: #555;\n  border: none;\n  color: white;\n  padding: 15px 32px;\n  text-align: center;\n  text-decoration: none;\n  display: flex;\n  font-size: 16px;\n  margin-top: 20px;\n  border-radius: 4px;\n`;\n\nexport const FormError = styled.div`\n  color: red;\n`;\n\nexport const FormValid = styled.div`\n  color: green;\n`;\n","import { Formik } from \"formik\";\nimport * as Yup from \"yup\";\nimport { useDispatch } from \"react-redux\";\nimport { useHistory } from \"react-router-dom\";\n\nimport { setRecentSearches, getRecipes } from \"Store/Reducers/recipesSlice\";\n\nimport * as Styles from \"./IngredientsFormStyles\";\n\nconst validationSchema = Yup.object().shape({\n  ingredients: Yup.string()\n    .min(3, \"ingredients must have at least 3 letters\")\n    .required(\"Must enter an ingredient\"),\n});\n\nexport const Error = ({ touched, message }) => {\n  if (!touched) {\n    return <Styles.FormError>&nbsp;</Styles.FormError>;\n  }\n\n  if (message) {\n    return <Styles.FormError>{message}</Styles.FormError>;\n  }\n\n  return <Styles.FormValid>Valid</Styles.FormValid>;\n};\n\nexport const IngredientsForm = ({ children }) => {\n  const dispatch = useDispatch();\n  let history = useHistory();\n\n  const handleSubmit = ({ ingredients }, { setSubmitting, resetForm }) => {\n    setSubmitting(true);\n\n    dispatch(setRecentSearches(ingredients));\n    dispatch(getRecipes(ingredients));\n\n    resetForm();\n    setSubmitting(false);\n\n    history.push(\"/recipes\");\n  };\n\n  return (\n    <Formik\n      initialValues={{ ingredients: \"\" }}\n      validationSchema={validationSchema}\n      onSubmit={handleSubmit}\n    >\n      {({\n        values,\n        errors,\n        touched,\n        handleChange,\n        handleBlur,\n        handleSubmit,\n        isSubmitting,\n      }) => (\n        <Styles.FormInputWrapper>\n          <form onSubmit={handleSubmit}>\n            <Styles.FormLabel htmlFor=\"ingredients\">\n              Ingredients:\n            </Styles.FormLabel>\n\n            <Styles.FormInput\n              type=\"text\"\n              name=\"ingredients\"\n              if=\"ingredients\"\n              placeholder=\"Enter your ingredients\"\n              onChange={handleChange}\n              onBlur={handleBlur}\n              value={values.ingredients}\n            />\n\n            <Error touched={touched.ingredients} message={errors.ingredients} />\n\n            {!!children ? <div>{children}</div> : null}\n\n            <Styles.FormButton type=\"submit\" disabled={isSubmitting}>\n              Search\n            </Styles.FormButton>\n          </form>\n        </Styles.FormInputWrapper>\n      )}\n    </Formik>\n  );\n};\n\nexport default IngredientsForm;\n","import { useSelector } from \"react-redux\";\n\nimport { selectRecipesRecentSearches } from \"Store/Reducers/recipesSlice\";\n\nimport IngredientsForm from \"Components/Forms/ingredientsForm/IngredientsForm\";\n\nexport const SearchPage = () => {\n  const recipesRecentSearches = useSelector(selectRecipesRecentSearches);\n\n  return (\n    <IngredientsForm>\n      {recipesRecentSearches.length > 0 ? (\n        <div>\n          <h4>Recent Searches:</h4>\n          <ol>\n            {recipesRecentSearches.map((ingredient, index) => (\n              <li key={index}>{ingredient}</li>\n            ))}\n          </ol>\n        </div>\n      ) : null}\n    </IngredientsForm>\n  );\n};\n\nexport default SearchPage;\n","import styled from \"styled-components\";\n\nexport const ResultsPageWrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n`;\n\nexport const ResultsTitle = styled.h4`\n  margin-bottom: 0;\n`;\n\nexport const ResultsButton = styled.button`\n  background-color: #555;\n  border: none;\n  color: white;\n  padding: 15px 32px;\n  text-align: center;\n  text-decoration: none;\n  display: flex;\n  font-size: 16px;\n  margin-top: 20px;\n  border-radius: 4px;\n`;\n","import { useSelector } from \"react-redux\";\n\nimport { selectRecipesSearchResults } from \"Store/Reducers/recipesSlice\";\n\nimport * as Styles from \"./ResultsPageStyles\";\n\nexport const ResultsPage = ({ history }) => {\n  const recipesSearchResults = useSelector(selectRecipesSearchResults);\n\n  return (\n    <Styles.ResultsPageWrapper>\n      <Styles.ResultsButton onClick={() => history.goBack()}>\n        Back\n      </Styles.ResultsButton>\n\n      <Styles.ResultsTitle>Recipes:</Styles.ResultsTitle>\n\n      {!!recipesSearchResults.length ? (\n        <ul>\n          {recipesSearchResults.map((result, index) => (\n            <li key={index}>{result.title}</li>\n          ))}\n        </ul>\n      ) : null}\n    </Styles.ResultsPageWrapper>\n  );\n};\n\nexport default ResultsPage;\n","import { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\n\nimport SearchPage from \"Components/SearchPage/SearchPage\";\nimport ResultsPage from \"Components/ResultsPage/ResultsPage\";\n\nexport const Navigation = () => {\n  return (\n    <Router basename=\"/recipe-app\">\n      <Switch>\n        <Route component={SearchPage} exact path=\"/\" />\n        <Route component={SearchPage} exact path=\"/search\" />\n        <Route component={ResultsPage} exact path=\"/recipes\" />\n        <Route component={Error} />\n      </Switch>\n    </Router>\n  );\n};\n\nexport default Navigation;\n","import { createGlobalStyle } from \"styled-components\";\n\nimport Navigation from \"Layouts/Navigation/Navigation\";\n\nconst GlobalStyle = createGlobalStyle`\n*,\n*::before,\n*::after {\n  box-sizing: border-box;\n}\n\n body {\n   margin: 0;\n   padding: 0;\n   font-family: sans-serif;\n }\n\n /* Rules for sizing material-icons */\n.material-icons.md-18 {\n  font-size: 18px;\n}\n.material-icons.md-24 {\n  font-size: 24px;\n}\n.material-icons.md-36 {\n  font-size: 36px;\n}\n.material-icons.md-48 {\n  font-size: 48px;\n}\n`;\n\nexport const App = () => (\n  <>\n    <GlobalStyle />\n    <Navigation />\n  </>\n);\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import ReactDOM from \"react-dom\";\nimport { Router } from \"react-router\";\nimport { Provider } from \"react-redux\";\nimport { createBrowserHistory } from \"history\";\n\nimport store from \"Store\";\n\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nconst customHistory = createBrowserHistory();\nconst rootElement = document.getElementById(\"root\");\n\nReactDOM.render(\n  <Provider store={store}>\n    <Router history={customHistory}>\n      <App />\n    </Router>\n  </Provider>,\n  rootElement\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}